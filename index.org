# Created 2019-04-02 Tue 00:13
#+OPTIONS: ^:t todo:nil toc:t num:3
#+OPTIONS: ^:t
#+OPTIONS: ^:t
#+OPTIONS: ^:t
#+TITLE: 范畴论完全装逼手册 / Grokking Monad 范畴论完全装逼手册 / Grokking Monad 范畴论完全装逼手册 / Grokking Monad 范畴论完全装逼手册 / Grokking Monad
#+DATE: <2017-02-10 Fri> <2017-02-10 Fri> <2017-02-10 Fri> <2018-07-28 Sat>
#+AUTHOR: 欧阳继超 欧阳继超 欧阳继超 欧阳继超
#+LATEX_CLASS: book
#+LATEX_CLASS_OPTIONS: [a5paper]
#+LATEX_HEADER: \usepackage[unicode,dvipdfm]{hyperref}
#+LATEX_HEADER: \usepackage{fontspec}
#+LATEX_HEADER: \usepackage{xeCJK}
#+LATEX_HEADER: \setCJKmainfont{STXihei}
#+DESCRIPTION: 全卷
#+INDEX: Catergory Theory!范畴论完全装逼手册 全

#+MACRO: ruby @@html:<ruby>$1<rt>$2</rt></ruby>@@
#+EXPORT_FILE_NAME: index.org
#+BEGIN_CENTER
FBI Warning
#+HTML: 本文所有文字与图片遵循 <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/">CC 署名-非商业性使用-禁止演绎 3.0 许可协议</a><br/><a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-nd/3.0/88x31.png" /></a>
#+END_CENTER

👇PDF，kindle， epub格式的书现已开放购买...

购买链接是 gumroad，需要科学上网才能点开，如果你不能科学上网，就不要买了（当然也没法买），把这六块钱投资到科学上网上吧。

#+HTML: <script src="https://gumroad.com/js/gumroad-embed.js"></script><div class="gumroad-product-embed" data-gumroad-product-id="grokking-monad"><a href="https://gumroad.com/l/grokking-monad"><img src="https://blog.oyanglul.us/grokking-monad/cover.jpg"></img></a></div>


#+MACRO: ruby @@html:<ruby>$1<rt>$2</rt></ruby>@@
#+PROPERTY: header-args :eval never-export
#+DESCRIPTION: 卷一 猫论
#+INDEX: Catergory Theory!范畴论完全装逼手册 卷一

- *[[file:./part1.org][第一部分：猫论]]* 👈
- [[file:./part2.org][第二部分：食用猫呢]]
- [[file:./part3.org][第三部分：搞基猫呢]]
* 第一部分：@@html:<ruby>猫论<rt>Catergory Theory</rt></ruby>@@

https://upload.wikimedia.org/wikipedia/commons/thumb/5/54/De_Alice%27s_Abenteuer_im_Wunderland_Carroll_pic_23_edited_1_of_2.png/1920px-De_Alice%27s_Abenteuer_im_Wunderland_Carroll_pic_23_edited_1_of_2.png [fn:-1-1]

#+BEGIN_QUOTE
`But I don’t want to go among mad people,’ Alice remarked.

`Oh, you can’t help that,’ said the Cat: `we’re all mad here. I’m mad. You’re mad.’

`How do you know I’m mad?’ said Alice.
`You must be,’ said the Cat, `or you wouldn’t have come here.’

Alice didn’t think that proved it at all; however, she went on `And how do you know that you’re mad?’

-- Alice's Adventures in Wonderland
#+END_QUOTE

是什么? 你也不懂, 我也不懂, 我们都不懂.

话说, 我又怎么知道你不懂呢?

当然不懂, 不然, 你怎么会来到这里?

我又是怎么知道自己不懂呢?

因为, 我知道懂的人什么样子. 显然, 我不是.

懂的人一定知道.

懂猫论的人又不一定知道编程. 但是懂编程的人可以略懂猫论.

编程是项技术, 即理论的降维. 所以要降低门槛, 比如我在书中也[[https://book.douban.com/subject/26883736/][写过一章]]用JavaScript来解释，某人也尝试过[[http://www.ruanyifeng.com/blog/2017/02/fp-tutorial.html][写博客解释]]，[fn:-1-2]没想到那些也不知道会不会 Haskell/Scala 的人就跑出来喷你们前端[fn:-1-3]这些不懂函数式的渣渣乱搞出来的东西根本就不是单子。

我也画过一些图来解释，又会被嫌弃画风不好。但是，作为灵魂画师，我只 +是觉得自己萌萌的啊+ 在乎画的灵魂是否能够给你一点启发。好吧，讲这么学术的东西，还是用dot来画吧，看起来好正规呢。

好了，安全带系好，我真的要开车了。为了防止，就用 Haskell/Scala 好了[fn:-1-4]，其实也不难解释清楚 +才怪+ 。

这里面很多很装逼的单词，它们都是 /斜体/ ，就算没看懂，把这些词背下来也足够。

这里还有很多代码, 它们都成对出现, 第一段是 Haskell, 第二段是 Scala.

[fn:-1-1] https://en.wikipedia.org/wiki/Cheshire_Cat

[fn:-1-2] 如果没看就刚好不要看了, 确实有些误导

[fn:-1-3] 等等, 写前端怎么了? JavaScript 只是我觉得顺手的若干语言之一, JS用户那么多, 写书当然要用 JS 啦, 难道用 Idris 那还能卖得掉吗? +当然最后用JS也没怎么卖掉...+

[fn:-1-4] 并不是说这两门语言一定在鄙视链顶端, 而是拥有强大类型系统的语言才能体现出范畴论的内容

** /Category/
#+INDEX: Catergory
#+INDEX: 范畴

一个 // 包含两个玩意
- 东西 =O= （Object）
- 两个东西的关系，箭头 =~>= （ // ）

还必须带上一些属性: 
- 一定有一个叫 id 的箭头，也叫做 1
- 箭头可以 //

恩, 就是这么简单!

#+CAPTION: 有东西 a, b, c 和箭头 f, g 的 Category，其中 f . g 表示 compose f 和 g
#+RESULTS: 
[[file:images/category.svg]]


#+BEGIN_QUOTE
注意到为什么我会箭头从右往左，接着看代码, 你会发现这个方向跟 compose 的方向刚好一致!
#+END_QUOTE

这些玩意对应到 haskell 的 typeclass 大致就是这样:

#+BEGIN_SRC haskell
  class Category (c :: * -> * -> *) where
    id :: c a a
    (.) :: c y z -> c x y -> c x z
#+END_SRC


而 Scala 可以用 trait 来表示这个 typeclass:
#+BEGIN_SRC scala
  trait Category[C[_, _]] {
    val id[A]: C[A, A]
    def <<<(a: C[Y, Z], b: C[X, Y]): C[X, Z] 
  }
#+END_SRC

如果这是你第一次见到 Haskell 代码，没有关系，语法真的很简单 +才怪+
- =class= 定义了一个 TypeClass， =Category= 是这个 TypeClass 的名字
- Type class 类似于定义类型的规范，规范为 =where= 后面那一坨
- 类型规范的对象是参数 ~(c:: * -> * -> *)~ ， =::= 后面是c的类型
- c 是 /higher kind/ =* -> *= ，跟higher order function的定义差不多，它是接收类型，构造新类型的类型。这里的 c 接收一个类型，再接收一个类型，就可以返回个类型。
#+INDEX: Kind
- ~id:: c a a~ 表示 c 范畴上的 a 到 a 的箭头
- =.= 的意思 c 范畴上，如果喂一个 y 到 z 的箭头，再喂一个 x 到 y 的箭头，那么就返回 x 到 z 的箭头。

另外 compose 在 haskell 中直接是句号 =.=

scala 中用 =<<<= 或者 =compose=

总之, 用文字再读一遍上面这些代码就了然了.

范畴 C 其实就包含
1. 返回 A 对象到 A 对象的 id 箭头
2. 可以组合 Y 对象到 Z 对象 和 X 对象到 Y 对象的箭头 compose

?还没有高数抽象呢。

*** /Hask/
Haskell 类型系统范畴叫做 Hask
#+INDEX: Hask

在 Hask 范畴上：

- 东西就是类型
- 箭头是类型的变换，即 =->=
- id 就是 id 函数的类型 =a -> a=
- compose 当然就是函数组合的类型

#+BEGIN_SRC haskell
  type Hask = (->)
  instance Category (Hask:: * -> * -> *) where
    (f . g) x = f (g x)
#+END_SRC

我们看见新的关键字 =instance= ，这表示 Hask 是 Type class Category 的实例类型，也就是说对任意Hask类型, 那么就能找到它的 id 和 compose

#+BEGIN_SRC scala
  implicit val haskCat: Category[Hask[_, _]] = new Category[Hask] {
    val id[A] = identity[A]
    def <<<[X, Y, Z](a: Hask[Y, Z], b: Hask[X, Y]) = a compose b
  }
#+END_SRC

Scala 中, 只需要 new 这个 trait 就可以实现这个 typeclass

其中: identity =Hask a a= 就是
#+BEGIN_SRC haskell
  (->) a a -- or
  a -> a -- 因为 -> 是中缀构造器
#+END_SRC

#+BEGIN_SRC scala
  A => A
#+END_SRC


*** /Duel/
#+INDEX: Duel
每个 Category 还有一个镜像，什么都一样，除了箭头是反的

** 函子 / Functor
#+INDEX: Functor
#+INDEX: 函子
两个范畴中间可以用叫 Functor 的东西来连接起来，简称 T。

#+CAPTION: Functor C D T, 从 C 到 D 范畴的Functor T
#+RESULTS: 
[[file:images/functor.svg]]

所以大部分把 Functor/Monad 比喻成盒子其实在定义上是错的，虽然这样比喻比较容易理解，在使用上问题也不大。但是，Functor 只是从一个范畴到另一个范畴的映射关系而已。

- 范畴间 东西的 Functor 标记为 =T(O)=
- 范畴间 箭头的 Functor 标记为 =T(~>)=
- 任何范畴C上存在一个 T 把所有的 O 和 ~> 都映射到自己，标记为id functor 1_C
  - 1_C(O) = O
  - 1_C(~>) = ~>

#+BEGIN_SRC haskell
  class (Category c, Category d) => Functor c d t where
    fmap :: c a b -> d (t a) (t b)
#+END_SRC

#+BEGIN_SRC scala
  trait Functor[C[_, _], D[_, _], T[_]] {
    def fmap[A, B](c: C[A, B]): D[T[A], T[B]]
  }
#+END_SRC

=Functor c d t= 这表示从范畴 c 到范畴 d 的一个 Functor t

如果把范畴 c 和 d 都限制到 Hask 范畴

#+BEGIN_SRC haskell
  class Functor (->) (->) t where
    fmap :: (->) a b -> (->) (t a) (t b)
#+END_SRC

#+BEGIN_SRC scala
  trait Functor[=>[_, _], =>[_, _], T[_]] {
   def fmap[A, B](c: =>[A, B]): =>[T[A], T[B]]
  }
#+END_SRC
=->= 在 Haskell 中是中缀类型构造器，所以是可以写在中间的

这样就会变成我们熟悉的 Funtor 的 Typeclass[fn:-1-5]

#+BEGIN_SRC haskell
  class Functor t where
    fmap :: (a -> b) -> (t a -> t b)
#+END_SRC

#+BEGIN_SRC scala
  trait Functor[T[_]] {
   def fmap[A, B](c: A => B): T[A] => T[B]
  }
#+END_SRC

而 // 就是这种连接相同范畴的 Functor，因为它从范畴 Hask 到达同样的范畴 Hask
#+INDEX: endofunctor
#+INDEX: 自函子

这回看代码就很容易对应上图和概念了, 这里的自函子只是映射范畴 ~->~ 到 ~->~, 箭头函数那个箭头, 类型却变成了 t a

这里的 fmap 就是 T(~>)，在 Hask 范畴上，所以是 T(->), 这个箭头是函数，所以也能表示成 T(f) 如果 =f:: a -> b=

[fn:-1-5] 这里可以把 Functor 的第一第二个参数消掉, 因为已经知道是在 Hask 范畴了

** /@@html:<ruby>Cat<rt> +猫+</rt></ruby>@@/

递归的, 当我们可以把一个 Category 看成一个 object，functor 看成箭头，那么我们又得到了一个 Category，这种 object 是 category 的 category 我们叫它 -- /Cat/

已经的办法用语言描述这么高维度的事情了，看图吧...

** 自然变换 / Natural Transformations <<NT>>

Functor 是范畴间的映射，所以在这个 Cat 范畴中, 把范畴看成是对象, 那么 Functor 在 Cat 范畴又是个箭头
#+INDEX: Natural Transformations
#+INDEX: 自然变换

#+CAPTION: Functor F和G，以及 F 到 G 的自然变化 \eta
#+RESULTS: 
[[file:images/natrual-transformation.svg]]

而 Functor 间也有映射，叫做 +喵的变换+ /自然变换/

范畴 c 上的函子 f 到 g 的自然变化就可以表示成
#+BEGIN_SRC haskell
  type Nat c f g = c (f a) (g a)
#+END_SRC

Scala 没有 rank n type[fn:-1-6], 只能靠 apply 来 meme 了
#+BEGIN_SRC scala
  trait Nat[C[_, _], F[_], G[_]] {
    def apply[A]: C[F[A], G[A]]
  }
#+END_SRC

Hask 范畴上的自然变化就变成了

#+BEGIN_SRC haskell
  type NatHask f g = f a -> g a
#+END_SRC

#+BEGIN_SRC scala
  trait NatHask[F[_], G[_]] {
    def apply[A]: F[A] => G[A]
  }
#+END_SRC

有趣的是, 还可以继续升维度, 比如

- 东西是函子
- 箭头是自然变换

恭喜你到达 Functor 范畴.

当然, 要成为范畴，还有两个属性:
- id 为 f a 到 f a 的自然变换
- 自然变换的组合

#+RESULTS: 
[[file:images/functor-category.svg]]

别着急, 我们来梳理一下，如果已经不知道升了几个维度了，我们假设类型所在范畴是第一维度
- 一维： Hask， 东西是类型，箭头是 ->
- 二维： Cat， 东西是 Hask， 箭头是 Functor
- 三维： Functor范畴， 东西是Functor， 箭头是自然变换

感觉到达三维已经是极限了，尼玛还有完没完了，每升一个维度还要起这么多装逼的名字，再升维度老子就画不出来了

所以这时候, 需要引入 String Diagram。

[fn:-1-6] 别急, 后面马上讲到
#+MACRO: ruby @@html:<ruby>$1<rt>$2</rt></ruby>@@
#+DESCRIPTION: 卷二 食用猫呢
#+INDEX: Catergory Theory!范畴论完全装逼手册 卷二

- [[file:./part1.org][第一部分：范畴论]]
- *[[file:./part2.org][第二部分：食用猫呢]]* 👈
- [[file:./part3.org][第三部分：搞基猫呢]]

** String Diagram

String Diagram 的概念很简单，就是点变线线变点。

还记得当有了自然变换之后，三个维度已经没法表示了，那原来的点和线都升一维度，变成线和面，这样，就腾出一个点来表示自然变换了。

#+CAPTION: String Diagram：自然变换是点，Functor是线，范畴是面
[[file:images/p1-string-diagram.png]]

compose的方向是从右往左，从下到上。

** /Adjunction Functor/ 伴随函子
#+INDEX: Adjunction Functor
范畴C和D直接有来有回的函子，为什么要介绍这个，因为它直接可以推出 Monad

让我们来看看什么叫有来回。

[[file:images/p1-adjunction-functor.png]]

其中：

- 一个范畴 C 可以通过函子 G 到 D，再通过函子 F 回到 C，那么 F 和 G 就是伴随函子。
- \eta 是 GF 到 1_D 的自然变换
- \epsilon 是 1_C 到 FG 的自然变换

同时根据同构的定义，G 与 F 是 /同构/ 的。
#+INDEX: isomorphic
#+INDEX: 同构

同构指的是若是有
#+BEGIN_SRC haskell
  f :: a -> b
  f':: b -> a
#+END_SRC

那么 f 与 f' 同构，因为 f . f' = id = f' . f

伴随函子的 FG 组合是 C 范畴的 id 函子 F . G = 1_c

#+CAPTION: 伴随函子的两个Functor组合, 左侧为 F \eta, 右侧为 \epsilon F
[[file:images/p1-ajunction-functor-compose.png]]

Functor 不仅横着可以组合，竖着(自然变换维度)也是可以组合的，因为自然变换是 Functor 范畴的箭头。

#+CAPTION: F \eta . \epsilon F  = F
[[file:images/p1-ajunction-functor-compose-nat.png]]

当到组合 F \eta . \epsilon F 得到一个弯弯曲曲的 F 时，我们可以拽着F的两段一拉，就得到了直的 F。

String Diagram 神奇的地方是所有线都可以拉上下两端，这个技巧非常有用，在之后的单子推导还需要用到。

** 从伴随函子到 @@html:<ruby>单子<rt> Monad</rt></ruby>@@
有了伴随函子，很容易推出单子，让我们先来看看什么是单子

- 首先，它是一个 endofunctor T
- 有一个从 i_c 到 T 的自然变化 \eta (eta)
- 有一个从 T^2 到 T 的自然变化 \mu (mu)

[[file:images/p1-monad-properties.png]]

#+BEGIN_SRC haskell
  class Endofunctor c t => Monad c t where
    eta :: c a (t a)
    mu  :: c (t (t a)) (t a)
#+END_SRC

#+BEGIN_SRC scala
  trait Monad[C[_, _], T[_]]] extends Endofunctor[C, T] {
    def eta[A]: C[A, T[A]]
    def mu[A]: C[T[T[A]], T[A]]
  }
#+END_SRC
同样，把 c = Hask 替换进去，就得到更类似我们 Haskell 中 Monad 的定义
#+BEGIN_SRC haskell
  class Endofunctor m => Monad m where
    eta :: a -> (m a)
    mu :: m m a -> m a
#+END_SRC

#+BEGIN_SRC scala
  trait Monad[M[_]] extends Endofunctor[M] {
    def eta[A]: A => M[A]
    def mu[A]: M[M[A]] => M[A]
  }
#+END_SRC
要推出单子的 \eta 变换，只需要让 FG = T
#+CAPTION: 伴随函子的 \epsilon 就是单子的 \eta
[[file:images/p1-ajunction-functor-to-monad-eta.png]]

同样的，当 FG = T, F \eta G 就可以变成 \mu
#+CAPTION: 伴随函子的 F \eta G 是函子的 \mu
[[file:images/p1-ajunction-functor-to-monad-mu.png]]

*** 三角等式

三角等式是指 \mu . T \eta = T = \mu . \eta T

要推出三角等式只需要组合 F \eta G 和 \epsilon F G
#+CAPTION: F \eta G  . \epsilon F G = F G
[[file:images/p1-adjunction-functor-triangle.png]]
#+CAPTION: F \eta G  . \epsilon F G= F G 对应到Monad就是 \mu . \eta T = T
[[file:images/p1-monad-triangle.png]]

换到代码上来说
#+BEGIN_SRC haskell
  (mu . eta) m = m
#+END_SRC

同样的，左右翻转也成立

#+CAPTION: F \eta G . F G \epsilon = F G
[[file:images/p1-adjunction-functor-triangle-reverse.png]]
#+CAPTION: F \eta G . F G \epsilon = F G 对应到 Monad是 \mu . T \eta = T
[[file:images/p1-monad-triangle-reverse.png]]
T \eta 就是 fmap eta
#+BEGIN_SRC haskell
  (mu . fmap eta) m = m
#+END_SRC

如果把 ~mu . fmap~ 写成 ~>>=~ , 就有了

#+BEGIN_SRC haskell
  m >>= eta = m
#+END_SRC

*** 结合律

单子另一大定律是结合律，让我们从伴随函子推起

假设我们现在有函子 F \eta G 和 函子 F \eta G F G, compose 起来会变成  F \eta G . F \eta G F G
[[file:images/p1-ajunction-functor-monad-laws-1.png]]

用 F G = T ， F \eta G = \mu 代换那么就得到了单子的 \mu . \mu T
[[file:images/p1-ajunction-functor-monad-laws-2.png]]

当组合 F \eta G 和 F G F \mu G 后，会得到一个镜像的图
[[file:images/p1-ajunction-functor-monad-laws-3.png]]

对应到单子的 \mu . T \mu

结合律是说 \mu . \mu T = \mu . T \mu , 即图左右翻转结果是相等的，为什么呢？看单子的String Diagram 不太好看出来，我们来看伴随函子

如果把左图的左边的 \mu 往上挪一点，右边的 \mu 往下挪一点，是不是跟右图就一样了
[[file:images/p1-ajunction-functor-monad-laws-4.png]]

结合律反映到代码中就是
#+BEGIN_SRC haskell
  mu . fmap mu = mu . mu
#+END_SRC

代码很难看出结合在哪里，因为正常的结合律应该是这样的 (1+2)+3 = 1+(2+3)，但是不想加法的维度不一样，这里说的是自然变换维度的结合，可以通过String Diagram 很清楚的看见结合的过程，即 \mu 左边的两个T和先 \mu 右边两个 T 是相等的。

** Yoneda lemma / +米田共+ 米田引理
#+INDEX: 米田引理
#+INDEX: Yoneda Lemma

米田引理是说所有Functor =f a= 一定存在 embed 和 unembed，使得 =f a= 和 =(a -> b) -> F b= isomorphic 同构

haskell还要先打开 RankNTypes 的 feature

#+BEGIN_SRC haskell
  {-# LANGUAGE RankNTypes #-}
  
  embed :: Functor f => f a -> (forall b . (a -> b) -> f b)
  embed x f = fmap f x
  
  unembed :: Functor f => (forall b . (a -> b) -> f b) -> f a
  unembed f = f id
#+END_SRC

Scala 语言没有 Rank N Type支持, 但是 [[NT][]] 提到过可以用 =apply= 来模拟. 其实可以使用 Cats 的 [[https://typelevel.org/cats/datatypes/functionk.html][FunctionK(~>)]] 更方便:
#+BEGIN_SRC scala
  def embed[F[_], A](fa: F[A])(implicit f: Functor[F]): (A => ?) ~> F =
    Lambda[(A => ?) ~> F](f.fmap(_)(fa))
  def unembed[F[_]](fnk: (A => ?) ~> F): F[A] =
    fnk(identity)
#+END_SRC

embed 可以把 functor =f a= 变成 =(a -> b) -> f b=

unembed 是反过来， =(a -> b) -> f b= 变成 =f a=

上个图就明白了
#+CAPTION: 也就是说，图中无论知道a->b 再加上任意一个 F x，都能推出另外一个 F
#+RESULTS: 
[[file:images/yoneda-lemma.svg]]

*** Rank N Type
#+INDEX: Arbitrary-rank polymorphism
#+INDEX: Rank N Type

说好的要解释 Rank N Type

Haskell 中可以不用声明类型, 但是其实是省略掉 universally quantified =forall=, 如果把 forall 全部加回来,
就明了很多:

- Monomorphic Rank 0 / 0级单态[fn:-1-7]: t
- Polymorphic Rank 1 / 1级 +变态+ 多态: forall a b. a -> b
- Polymorphic Rank 2 / 2级多态: forall c. (forall a b. a -> b) -> c
- Polymorphic Rank 3 / 3级多态: forall d . (forall c . (forall a b . a -> b) -> c) -> d

看 rank 几只要数左边 forall 的个数就好了.

一级多态只锁定一次类型 a 和 b

二级多态可以分两次确定类型, 第一次确定 c, 第二次确定 a b

三级多台分三次: 第一次 d, 第二次 c, 第三次 a b

比如:

#+BEGIN_SRC haskell
  rank2 :: forall b c . b -> c -> (forall a. a -> a) -> (b, c)
  rank2 b c f = (f b, f c)
  
  rank2 True 'a' id
  -- (True, 'a')
#+END_SRC

#+BEGIN_SRC scala
  def rank2[B, C](b: B, c: C)(fnk: Id ~> Id): (B, C) =
    (fnk(b), fnk(c))
  rank2(true, 'a')(FunctionK.id[Id])
#+END_SRC

- f 在 =f True= 时类型 =Boolean -> Boolean= 是符合 =forall a. a->a= 的
- 与此同时 =f 'a'= 时类型确实是 =Char -> Char= 但也符合 =forall a. a->a=

如果是 rank1 类型系统就懵逼了:
#+BEGIN_SRC haskell
  rank1 :: forall a b c . b -> c -> (a -> a) -> (b, c)
  rank1 b c f = (f b, f c)
#+END_SRC

#+BEGIN_SRC scala
  def rank1[A, B, C](b: B, c: C)(fn: A => A): (B, C) =
    (fn(b), fn(c))
#+END_SRC
f 在 =f True= 是确定 a 是 Boolean，在rank1多态是时就确定了 =a->a= 的类型一定是 =Boolean -> Boolean=

所以到 =f 'a'= 类型就挂了。

[fn:-1-7] 也就不是不变态

** /Kleisli Catergory/
#+INDEX: Kleisi Catergory

#+CAPTION: 注意观察大火箭 <=< 的轨迹（不知道dot为什么会把这根线搞这么又弯又骚的） 和 >>= 。所以 Kleisli 其实就是斜着走的一个范畴，但是 >>= 把它硬生生掰 +弯+ 直了。
#+RESULTS: 
[[file:images/kleisli.svg]]

 的范畴叫做 , 自然变换是其箭头。那也可以定义一个范畴吗?[fn:-1-8]

是的, 这个范畴名字叫做 +单子范畴+[fn:-1-9] [fn:-1-10]，那么 Kleisli 的箭头是什么？
我们看定义，Kleisli Catergory

1. 箭头是 Kleisli 箭头 =a -> T b=
2. 东西就是c范畴中的东西. 因为 a 和 b 都是 c 范畴上的， 由于T是自函子，所以 T b 也是 c 范畴的

看到图上的  和 \mu 了没？[fn:-1-11]

#+BEGIN_SRC haskell
  f :: b -> T c
  fmap f :: T b -> T T c
  mu :: T T c -> T c
#+END_SRC

#+BEGIN_SRC scala
  def f[T[_], B, C](b: B): T[C]
  def fmap[T[_], B, C](f: B => C)(tb: T[B]): T[T[C]]
  def mu[T[_], C](ttc: T[T[C]]): T[C]
#+END_SRC

紫色的箭头 =T f=[fn:-1-12] 和紫色的虚线箭头 \mu 连起来就是 =T f'=, 那么最出名的 ~>>=~ 符号终于出来了:
#+BEGIN_SRC haskell
  tb >>= f = (mu . fmap f) tb
#+END_SRC

#+BEGIN_SRC scala
  def flatMap[T[_], B, C](f: B => T[C])(tb: T[B]): T[C] = (mu compose fmap(f))(tb)
#+END_SRC

下面这个大火箭 ~<=<~ 可以把蓝色箭头组合起来.
#+BEGIN_SRC haskell
  (f <=< g) = mu . T f . g = mu . fmap f . g
#+END_SRC

#+BEGIN_SRC scala
  def <=<[T[_], A, B, C](f: B => T[C])(g: A => T[B]): A => T[C] =
    mu compose fmap(f) compose g
#+END_SRC

因此大火箭就是 Kleisli 范畴的 =compose=

#+BEGIN_SRC haskell
  (<=<) :: Monad T => (b -> T c) -> (a -> T b) -> (a -> T c)
#+END_SRC

[fn:-1-8] 当然, 单子是自函子，所以也可以是自函子范畴

[fn:-1-9] 怎么说也是函数式编程的核心,怎么可以叫的这么low这么直接

[fn:-1-10] 这个是我瞎翻译的, 但是读出来就是这么个意思, 真的, 不骗你, 照这么读绝对装的一手好逼, 不会被嘲笑的

[fn:-1-11] (敲黑板) 就是紫色那根嘛!

[fn:-1-12] 即 =fmap f=

** Summary
第一部分理论部分都讲完了， 如果你读到这里还没有被这些的概念搞daze，接下来可以看看它到底跟我们编程有鸟关系呢？第二部分将介绍这些概念产生的一些实用的monad

- 👉 [[file:./part2.org][第二部分：]]
- [[file:./part3.org][第三部分：]]

当然我还没空全部写完，如果有很多人 Gumroad 上的  电子书的话，我可能会稍微写得快一些。毕竟，写了也没人感兴趣也怪浪费时间的。不过，我猜也没几个人能看到这一行，就当是自言自语吧，怎么突然觉得自己好分裂。

* 第二部分：@@html:<ruby>食用猫呢<rt> Practical Monads</rt></ruby>@@
第一部分理论部分都讲完了， 如果你读到这里还没有被这些吊炸天的概念搞daze，接下来可以看看它到底跟我们编程有鸟关系呢？

第二部分将介绍由这些概念产生的一些实用的monad instances，这些 monad 都通过同样的抽象方式，解决了分离计算与副作用的工作。

最后一部分，我们还可以像 IO monad 一样，通过 free 或者 Eff 自定义自己的计算，和可能带副作用的解释器。

** Identity
这可能是最简单的 monad 了。不包含任何计算
#+BEGIN_SRC haskell
  newtype Identity a = Identity { runIdentity :: a }
#+END_SRC

这里使用 =newtype= 而不是 =data= 是因为 =Identity= 与 =runIdentity= 是 isomorphic （同构，忘了的话回去翻第一部分）

#+BEGIN_SRC haskell
  Identity :: a -> Identity a
  runIdentity :: Identity a -> a
#+END_SRC

所以 ~runIdentity . Identity = id~ ，所以他们是同构的。

左边的 =Identity= 是类型构造器, 接收类型 =a= 返回 =Identity a= 类型

如果 a 是 Int，那么就得到一个 =Identity Int= 类型。

右边的 =Identity= 是数据构造器，也就是构造值，比如 =Identity 1= 会构造出一个值，其类型为 =Identity Int=

大括号比较诡异，可以想象成给 =a= 一个 key，同过这个 key 可以把 a 取出来，比如
#+BEGIN_SRC haskell
  runIdentity (Identity 1)
#+END_SRC

会返回 1

Identity 可以实现 Functor 和 Monad，就得到 Identity functor 和 Identity monad
#+BEGIN_SRC haskell
  instance Functor Identity where
    fmap f (Identity a) = Identity (f a)
  
  instance Monad Identity where
    return a = Identity a
    Identity a >>= f = f a
#+END_SRC

可以看到 Identity 即是构造器，也是解构器，在模式匹配是可以 destructure 值。例如上面Functor 实现中的 =fmap f (Identity a)= , 假如fmap的是 =Identity 1=, 那么这个模式匹配到 =(Identity a)= 时会把 =1= 放到 =a= 的位置。

Identity 看起来什么也没有干，就跟 identity 函数一样，但是在后面讲到 State monad时你会发现他的价值。

** Maybe
这是一个超级简单的 Monad，首先，需要定义这个一个 
#+BEGIN_SRC haskell
  data Maybe a = Just a | Nothing
#+END_SRC
Haskell中定义一个ADT十分简单，不像Scala那么啰嗦。左边是类型构造器，右边有数据构造器，你会发现有一根竖线 =|= ， 它分隔着两个构造器
- Just
- Nothing
其中 a （一定要小写）可以是任意类型

所以 =Just 1= 会得到一个 =Num a => Mabye a= 类型（意思就是 =Maybe a= 但是 =a= 的类型约束为 =Num= ）， =Nothing= 也会得到一个 =Maybe a= 只不过 =a= 没有类型约束。

总之我们有了构造器可以构造出 Maybe 类型，而这个类型能做的事情，就要取决它实现了哪些 class 的 instance 了。比如它可以是一个 Functor
#+BEGIN_SRC haskell
  instance Functor Maybe where
    fmap f (Just a) = Just (f a)
#+END_SRC

#+CAPTION: fmap :: (a -> b) -> f a -> f b
[[file:images/p2-maybe-functor.png]]

然后，还实现 Monad
#+BEGIN_SRC haskell
  instance Monad Maybe where
    return a = Just a
    (Just a) >>= f = f a
    Nothing >>= f = Nothing
#+END_SRC

#+CAPTION: 还记得第一部分提到的 Kleisli 范畴吗？
[[file:images/p2-maybe-kleisli.png]]

Maybe 有用在于能合适的处理 // 的返回值。偏函数相对于，是指只能对部分输入返回输出的函数。

比如一个取数组某一位上的值的函数，就是偏函数，因为假设你想取第4位的值，但不是所有数组长度都大于4，就会有获取不了的尴尬情况。
#+BEGIN_SRC haskell
  [1,2,3] !! 4
#+END_SRC

如果使用 Maybe 把偏函数处理不了的输入都返回成 Nothing，这样结果依然保持 Maybe 类型，不影响后面的计算。

** Either

Either 的定义也很简单
#+BEGIN_SRC haskell
  data Either a b = Left a | Right b
#+END_SRC

*** Product & Coproduct
看过第一部分应该还能记得有一个东西叫 Duel，所以见到如果范畴上有 Coproduct 那么肯定在duel范畴上会有同样的东西叫 Product。

那么我们先来看看什么是 Coproduct

#+CAPTION: Coproduct
[[file:images/p2-coproduct.png]]

像这样，能通过两个箭头到达同一个东西，就是 Coproduct。这里箭头 =Left= 能让 =a= 到 =Either a b= ， 箭头 =Right= 也能让 =b= 到达 =Either a b=

有意思的是还肯定存在一个 Coproduct 和 箭头，使得下图成立
[[file:images/p2-coproduct-law.png]]

箭头反过来，就是 Product, 比如 Tuple

#+CAPTION: Product
[[file:images/p2-product.png]]

Tuple 的 =fst= 箭头能让 =(a, b)= 到达 =a= 对象，而箭头 =snd= 能让其到达 =b= 对象。

*** Either Monad
确切的说，Either 不是 monad， =Either a= 才是。还记得 monad 的 class 定义吗？
#+BEGIN_SRC haskell
  class Endofunctor m => Monad m where
    eta :: a -> (m a)
    mu :: m m a -> m a
#+END_SRC
所以 m 必须是个 Endofunctor，也就是要满足Functor
#+BEGIN_SRC haskell
  class Functor t where
    fmap :: (a -> b) -> (t a -> t b)
#+END_SRC
t a 的 kind 是 *，所以 t 必须是 kind * -> *
也就是说，m 必须是接收一个类型参数的类型构造器

而 Either 的 kind 是 * -> * -> *, Either a 才是 * -> *

所以只能定义 Either a 的 Monad
#+BEGIN_SRC haskell
  instance Monad (Either a) where
    Left  l >>= _ = Left l
    Right r >>= k = k r
#+END_SRC

很明显的，>>= 任何函数到 都不会改变，只有 >>= 右边才能产生新的计算。


** Reader
Reader 的作用是给一个计算喂数据。

在描述计算的时候，并不需要关心输入时什么，只需要 asks 就可以拿到输入值

而真正的输入，会在运行计算时给予。

跟 Identity 一样，我们用 newtype 来定义一个同构的 Reader 类型
#+BEGIN_SRC haskell
  newtype Reader e a = Reader { runReader :: (e -> a) }
#+END_SRC

其中
- e 是输入
- a 是结果
- 构造 Reader 类型需要确定 输入的类型 e 与输出的类型 a
- =runReader= 的类型是 =runReader:: (Reader e a) -> (e -> a)=

也就是说在描述完一个 Reader 的计算后，使用 runReader 可以得到一个 e -> a 的函数，使用这个函数，就可以接收输入，通过构造好的计算，算出结果 a 返回。

那么，让我们来实现 Reader 的 monad instance，就可以描述一个可以 ask 的计算了。

#+BEGIN_SRC haskell
  instance Monad (Reader e) where
      return a         = Reader $ \_ -> a
      (Reader g) >>= f = Reader $ \e -> runReader (f (g e)) e
#+END_SRC

跟Either一样，我们只能定义 Reader e 的 monad instance。

注意这里的
- f 类型是 =(a -> Reader e a)=
- g 其实就是是 destructure 出来的 runReader，也就是 e -> a
- 所以 (g e) 返回 a
- f (g e) 就是 =Reader e a=
- 再 run 一把最后得到 a

#+CAPTION: f 函数，接收 a 返回一个 从 e 到 a 的 Reader
[[file:images/p2-reader-monad.png]]

让我们来看看如何使用 Reader
#+BEGIN_SRC haskell
  import Control.Monad.Reader
  
  data Environment = Env
    { fistName :: String
    , lastName :: String
    } deriving (Show)
  
  helloworld :: Reader Environment String
  helloworld = do
    f <- asks firstName
    l <- asks lastName
    return "Hello " ++ f ++ l
  
  runHelloworld :: String
  runHelloworld = runReader helloworld $ Env "Jichao" "Ouyang"
#+END_SRC

这段代码很简单，helloworld 负责打招呼，也就是在名字前面加个 "Hello"，而跟谁打招呼，这个函数并不关心，而单纯的是向 Environment  就好。

#+CAPTION: asks 可以将 e -> a 的函数变换成 Reader e a
[[file:images/p2-reader-monad-ask.png]]

在运行时，可以提供给 Reader 的输入 Env fistname lastname。
[[file:images/p2-reader-monad-run.png]]

*** do notation
这可能是你第一次见到 =do= 和 =<-=. 如果不是，随意跳过这节。

- do 中所有 <- 的右边都是 =Reader Environment String= 类型
- do 中的 return 返回类型也必须为  =Reader Environment String=
- =asks firstName= 返回的是 =Reader Environment String= 类型， =<-= 可以理解成吧 monad =Reader Environment= 的内容放到左边的 f, 所以 f 的类型是 String。

看起来像命令式的语句，其实只是 ~>>=~ 的语法糖，但是明显用do可读性要高很多。
#+BEGIN_SRC haskell
  helloworld = (asks firstName) >>=
    \f -> (asks lastName) >>=
         \l -> return "Hello " ++ f ++ l
#+END_SRC


** Writer

除了返回值，计算会需要产生一些额外的数据，比如 log

此时就需要一个 Writter，其返回值会是一个这样 =(result, log)= 的 tuple

限制是 log 的类型必须是个 

#+BEGIN_SRC haskell
  example :: Writer String String
  example  = do
    tell "How are you?"
    tell "I'm fine thank you, and you?"
    return "Hehe Da~"
  
  output :: (String, String)
  output = runWriter example
  -- ("Hehe Da~", "How are you?I'm fine thank you, and you?")
#+END_SRC

Writer 的定义更简单
#+BEGIN_SRC haskell
  newtype Writer l a = Writer { runWriter :: (a,l) }
#+END_SRC
里面只是一个 tuple 而已
- w 是 log
- a 是 返回值

看看如何实现 Writer monad
#+BEGIN_SRC haskell
  instance (Monoid w) => Monad (Writer w) where
      return a             = Writer (a,mempty)
      (Writer (a,l)) >>= f = let (a',l') = runWriter $ f a in
                             Writer (a',l `mappend` l')
#+END_SRC

- return 不会有任何 log，l 是 monoid 的 mempty
- f 的类型为 =a -> Writer l a=
- =runWriter $ f a= 返回 =(a, l)=

[[file:images/p2-writer-monad.png]]

所以在 >>= 时，我们先把 f a 返回的 Writer run了，然后把两次 log =mappend= 起来。
[[file:images/p2-writer-monad-bind.png]]

** State
跟名字就看得出来 State monad 是为了处理状态。虽然函数式编程不应该有状态，不然会引用透明性。但是，state monad并不是在计算过程中修改状态，而是通过描述这种变化，然后需要时在运行返回最终结果。这一点跟 Reader 和 Writer 这两个看起来是副作用的 IO 是一样的。

先看下 State 类型的定义
#+BEGIN_SRC haskell
  newtype State s a = State { runState :: s -> (a, s) }
#+END_SRC

可以看到 State 只包含一个 从旧状态 s 到新状态 s 和返回值 a 的 Tuple 的函数。

通过实现 Monad，State 就可以实现命令式编程中的变量的功能。
#+BEGIN_SRC haskell
  instance Monad (State s) where
    return a        = State $ \s -> (a,s)
    (State x) >>= f = State $ \s -> let (v,s') = x s in
                                   runState (f v) s'
#+END_SRC
return 很简单，就不用解释了。

[[file:images/p2-state-monad.png]]

x 类型是 =s -> (a, s)= ,所以 x s 之后会返回 结果和状态。也就是运行当前 State，把结果 v 传给函数 f，返回的 State 再接着上次状态运行。

#+CAPTION: State x >>= f 后runState的数据流（啊啊啊，画歪了，感觉需要脉动一下）
[[file:images/p2-state-monad-bind.png]]

使用起来也很方便，State 提供 =get= =put= =moidfy= 三个方便的函数可以生成修改状态的State monad

#+BEGIN_SRC haskell
  import Control.Monad.Trans.State.Strict
  test :: State Int Int
  test = do
    a <- get
    modify (+1)
    b <- get
    return (a + b)
  
  main = print $ show $ runState test 3
  -- (7, 4)
#+END_SRC


** Validation
如果你有注意到，前面的 Either 可以用在处理错误和正确的路径分支，但是问题是错误只发生一次。

#+BEGIN_QUOTE
Validation 没有在标准库中，但是我觉得好有用啊，你可以在 ekmett 的 [[https://github.com/ekmett/either][github]] 中找到源码
#+END_QUOTE

想象一下这种场景，用户提交一个表单，我们需要对每一个field进行验证，如果有错误，需要把错误的哪几个field的错误消息返回。显然如果使用 Either 来做，只能返回第一个field的错误信息，后面的计算都会被跳过。

针对这种情况， Validation 更适合
#+BEGIN_SRC haskell
  data Validation e a = Failure e | Success a
#+END_SRC

ADT定义看起来跟 Either 是一样的，不同的是  Failure 是 

*** @@html:<ruby>含幺半群<rt>Monoid</rt></ruby>@@
monoid 首先得是  ，然后再 含幺。
#+BEGIN_SRC haskell
  class Semigroup a where
    (<>) :: a -> a -> a
    (<>) = mappend
#+END_SRC

半群非常简单，只要是可以 =<>= (mappend) 的类型就是了。

含幺只需要有一个 =mempty= 的 幺元就行
#+BEGIN_SRC haskell
  class Monoid a where
    mempty  :: a
    mappend :: a -> a -> a
#+END_SRC

比如 List 就是 Semigroup
#+BEGIN_SRC haskell
  instance Semigroup [a] where
    (<>) = (++)
#+END_SRC
也是 Monoid
#+BEGIN_SRC haskell
  instance Monoid [a] where
    mempty  = []
    mappend = (++)
#+END_SRC

Monoid 的 =<>= 满足：
- mempty <> a = a
- a <> b <> c = a <> (b <> c)
*** 回到 Validation
现在让 Failure e 满足 Monoid，就可以 =mappend= 错误信息了。
#+BEGIN_SRC haskell
  instance Semigroup e => Semigroup (Validation e a) where
    Failure e1 <> Failure e2 = Failure (e1 <> e2)
    Failure _  <> Success a2 = Success a2
    Success a1 <> Failure _  = Success a1
    Success a1 <> Success _  = Success a1
#+END_SRC

下来，我们用一个简单的例子来看看 Validation 与 Either 有什么区别。

假设我们有一个form，需要输入姓名与电话，验证需要姓名是非空而电话是11位数字。

首先，我们需要有一个函数去创建包含姓名和电话的model
#+BEGIN_SRC haskell
  data Info = Info {name: String, phone: String} deriving Show
#+END_SRC

然后我们需要验证函数
#+BEGIN_SRC haskell
  notEmpty :: String -> String -> Validation [String] String
  notEmpty desc "" = Failure [desc <> " cannot be empty!"]
  notEmpty _ field = Success field
#+END_SRC
notEmpty 检查字符是否为空，如果是空返回 Failure 包含错误信息，若是非空则返回 Success 包含 field

同样的可以创建 11位数字的验证函数
#+BEGIN_SRC haskell
  phoneNumberLength :: String -> String -> Validation [String] String
  phoneNumberLength desc field | (length field) == 11 = Success field
                               | otherwise = Failure [desc <> "'s length is not 11"]
#+END_SRC
实现 Validation 的 Applicative instance，这样就可以把函数调用lift成带有验证的 Applicative
#+BEGIN_SRC haskell
  instance Semigroup e => Applicative (Validation e) where
    pure = Success
    Failure e1 <*> Failure e2 = Failure e1 <> Failure e2
    Failure e1 <*> Success _  = Failure e1
    Success _  <*> Failure e2 = Failure e2
    Success f <*> Success a = Success (f a)
#+END_SRC
- 失败应用到失败会 concat 起来
- 失败跟应用或被成功应用还是失败
- 只有成功应用到成功才能成功，这很符合验证的逻辑，一旦验证中发生任何错误，都应该返回失败。

#+BEGIN_SRC haskell
  createInfo :: String -> String -> Validation [String] Info
  createInfo name phone = Info <$> notEmpty "name" name <*> phoneNumberLength "phone" phone
#+END_SRC

现在我们就可以使用带validation的 createInfo 来安全的创建 Info 了

#+BEGIN_SRC haskell
  createInfo "jichao" "12345678910" -- Success Info "jichao" "12345678910"
  createInfo "" "123" -- Failure ["name cannot be empty!", "phone's length is not 11"]
#+END_SRC

** Cont
Cont 是  的 monad，也就是说，它是包含 cps 计算 monad。

先看一下什么是 CPS，比如有一个加法
#+BEGIN_SRC haskell
  add :: Int -> Int -> Int
  add = (+)
#+END_SRC

但是如果你想在算法加法后，能够继续进行一个其他的计算，那么就可以写一个 cps版本的加法
#+BEGIN_SRC haskell
  addCPS :: Int -> Int -> (Int -> r) -> r
  addCPS a b k = k (a + b)
#+END_SRC

非常简单，现在我们可以看看为什么需要一个 Cont monad 来包住 CPS 计算，首先，来看 ADT 定义
#+BEGIN_SRC haskell
  newtype Cont r a = Cont { runCont :: ((a -> r) -> r) }
#+END_SRC

又是一个同构的类型，Cont 构造器只需要一个 runCount，也就是让他能继续计算的一个函数。

完了之后来把之前的 addCPS 改成 Cont
#+BEGIN_SRC haskell
  add :: Int -> Int -> Cont k Int
  add a b = return (a + b)
#+END_SRC

注意到 addCPS 接收到 a 和 b 之后返回的类型是 =(Int -> r) -> r= ，而 Cont 版本的 =add= 返回 =Cont k Int=

明显构造 =Cont k Int= 也正是需要 =(Int -> r) -> r= ，所以 Cont 就是算了 k 的抽象了。

#+BEGIN_SRC haskell
  instance Monad (Cont r) where
      return a = Cont ($ a)
      m >>= k  = Cont $ \c -> runCont m $ \a -> runCont (k a) c
#+END_SRC

=($ a)= 比较有意思, 我们都知道 =f $ g a= 其实就是 =f(g a)=, 所以 =$= 其实就是一个 apply 左边的函数到右边表达式的中缀函数, 如果写成前缀则是
=($ (g a) f)=. 是反的是因为 =$= 是有结合, 需要右边表达式先求值, 所以只给一个 a 就相当于 =($ a) = \f -> f a=

回到 Monad Cont...

** Summary
第二部分食用部分也讲完了， 不知是否以及大致了解了monad的尿性各种基本玩法呢？通过这些常用的基本的 monad instance，解决命令式编程中的一些简单问题应该是够了。

不过，接下来还有更变态的猫，就先叫她 +搞基+ 猫呢好了。

- 👉 [[file:./part3.org][第三部分：]]

当然我又还没空全部写完，如果还有很多人 Gumroad 上的  电子书的话，我可能会稍微写得快一些。毕竟，写了也没人感兴趣也怪浪费时间的。不过，我猜也没几个人能看到这一行，就当是我又自言自语吧，怎么又突然觉得自己好分裂，诶~，为什么我要说又？
#+MACRO: ruby @@html:<ruby>$1<rt>$2</rt></ruby>@@
#+DESCRIPTION: 卷三 搞基猫呢
#+INDEX: Catergory Theory!范畴论完全装逼手册 卷三

- [[file:./part1.org][第一部分：猫论]]
- [[file:./part2.org][第二部分：食用猫呢]]
- [[file:./part3.org][*第三部分：搞基猫呢*]] 👈

* 第三部分:@@html:<ruby>搞基猫呢<rt>Advanced Monads</rt></ruby>@@
第二部分介绍了一些实用的monad instances，这些 monad 都通过同样的抽象方式，解决了分离计算与副作用的工作。

通过它们可以解决大多数的基本问题，但是正对于复杂业务逻辑，我们可能还需要一些更高阶的 monad 或者 pattern。

当有了第一部分的理论基础和第二部分的实践，这部分要介绍的猫呢其实并不是很搞基。通过这一部分介绍的搞基猫呢，
我们还可以像 IO monad 一样，通过 free 或者 Eff 自定义自己的计算，和可能带副作用的解释器。

** RWS
RWS 是缩写 Reader Writer State monad, 所以明显是三个monad的合体。如果已经忘记 Reader Writer 或者 State，请到第二部分复习一下。

一旦把三个 monad 合体，意味着可以在同一个 monad 使用三个 monad 的方法，比如，可以同时使用 Reader 的 ask, State 的 get, put, 和 Writer 的 tell

#+BEGIN_SRC haskell
  readWriteState = do
    e <- ask
    a <- get
    let res = a + e
    put res
    tell [res]
    return res
  runRWS readWriteState 1 2
  -- (3 3 [3])
#+END_SRC

注意到跟 Reader 和 State 一样，run的时候输入初始值

其中 1 为 Reader 的值，2 为 State 的初始状态.

** Monad Transform

你会发现 RWS 一起用挺好的，能读能写能打 log，但是已经固定好搭配了，只能是 RWS ，如果我还想加入其它的 Monad，该怎么办呢？

这时候，简单的解决方案是加个 T，比如对于 Reader，我们有 ReaderT，RWS，也有对应的 RWST。其中 T 代表 Transform。

*** ReaderT

让我来通过简单的 ReaderT 来解释到底什么是 T 吧, 首先跟 Reader 一样我们有个 runReaderT

#+BEGIN_SRC haskell
  newtype ReaderT e m a = ReaderT { runReaderT :: e -> m a }
#+END_SRC

比较一下 Reader 的定义
#+BEGIN_SRC haskell
  newtype Reader e a = Reader { runReader :: (e -> a) }
#+END_SRC

有没有发现多了一个 m, 也就是说, =runReader e= 会返回 a, 但是 =runReaderT e= 则会返回 =m a=

[[file:images/p3-ReaderT.png]]

#+BEGIN_SRC haskell
  instance (Monad m) => Monad (ReaderT e m) where
      return   = lift . return
      r >>= k  = ReaderT $ \ e -> do
          a <- runReaderT r e
          runReaderT (k a) e
#+END_SRC

再看看 monad 的实现, 也是一样的, 先 run 一下 =r e= 得到结果 =a=, 应用函数 =k= 到 =a=, 再 run 一把.


问题是, 这里的 =return= 里面的 =lift= 是哪来的?

#+BEGIN_SRC haskell
  instance MonadTrans (ReaderT e) where
    lift m = ReaderT (const m)
#+END_SRC

[[file:images/p3-MonadTrans-ReaderT-e-m.png]]

这个函数 =lift= 被定义在 MonadTrans 的实例中, 简单的把 m 放到 ReaderT 结果中.

例如, =lift (Just 1)= 会得到 ReaderT, 其中 e 随意, m 为 Maybe Num

重点需要体会的是, Reader 可以越过 Maybe 直接操作到 Num, 完了再包回来.

有了 ReaderT, 搭配 Id Monad 就很容易创建出来 Reader Monad

#+BEGIN_SRC haskell
  type Reader r a= ReaderT r Identity a
#+END_SRC

越过 Id read 到 Id 内部, 完了再用 Id 包回来, 不就是 Reader 了么

#+BEGIN_SRC haskell
  ReaderT { runReaderT :: r -> Identity a }
  -- Identity a is a
  ReaderT { runReaderT :: r -> a }
#+END_SRC

** Alternative

这个 typeclass 提供 =<|>= 函数, 表示要么计算左边, 要么计算右边

#+BEGIN_SRC haskell
  class Applicative f => Alternative f where
      empty :: f a
      (<|>) :: f a -> f a -> f a
#+END_SRC

[[file:images/p3-Alternative.png]]

其实就是 Applicative 的 =或=

比如:
#+BEGIN_SRC haskell
  Just 1 <|> Just 2 -- Just 1
  Just 1 <|> Nothing -- Just 1
  Nothing <|> Just 1 -- Just 1
  Nothing <|> Nothing -- Nothing
#+END_SRC

** MonadPlus
这跟 Alternative 是一毛一样的, 只是限制的更细, 必须是 Monad才行

#+BEGIN_SRC haskell
  class (Alternative m, Monad m) => MonadPlus m where
     mzero :: m a
     mzero = empty
     mplus :: m a -> m a -> m a
     mplus = (<|>)
#+END_SRC

看, 实现中直接就调用了 Alternative 的 =empty= 和 =<|>=

** ST Monad
ST Monad 跟 State Monad 的功能有些像, 不过更厉害的是, 他不是 immutable 的, 而是 "immutable" 的在原地做修改. 改完之后 runST 又然他回到了 immutable 的 Haskell 世界.

#+BEGIN_SRC haskell
  sumST :: Num a => [a] -> a
  sumST xs = runST $ do           -- do 后面的事情会是不错的内存操作, runST 可以把它拉会纯的世界
      n <- newSTRef 0             -- 在内存中创建一块并指到 STRef
      forM_ xs $ \x -> do         -- 这跟命令式的for循环改写变量是一毛一样的
          modifySTRef n (+x)
      readSTRef n                 -- 返回改完之后的 n 的值
#+END_SRC

** Free Monad
上一章说过的 RWS Monad 毕竟是固定搭配，当你的业务需要更多的 Monad 来表示 Effect 时，
我们就需要有那么个小猪手帮我们定义自己的 Monad。

那就是 Free, Free 可以将任意 datatype lift 成为 Monad

*** Free
先看 Free 什么定义:

#+BEGIN_SRC haskell
  data Free f a = Roll (f (Free f a)) | Return a
#+END_SRC

其中 =f= 就是你业务需要的 effect 类型, =a= 是这个 effect 所产生的返回值类型。

右边两种构造函数，如果把 =Role= 改成 =Cons=, =Return= 改成 =Nil= 的话, 是不是跟 List 其实是  的呢? 所以如果想象成 List, 那么 =f= 在这里就相当于 List 中的一个元素.

到那时, ~>>=~ 的操作又跟 List 略有不同, 我们都知道 ~>>=~ 会把每一个元素 map 成 List, 然后 flatten, 但 Free 其实是用来构建
顺序的 effect 的, 所以:

#+BEGIN_SRC haskell
  instance Functor f => Monad (Free f) where
    return a        = Return a
    Return a >>= fn = fn a
    Roll ffa >>= fn = Roll $ fmap (>>= fn) ffa
#+END_SRC

你会发现 ~>>=~ 会递归的 =fmap= 到 =Roll= 上, 直到最后一个 =Return=.

比如, 如果你有一个 program 有三种副作用 Eff1, Eff2, Eff3

#+BEGIN_SRC haskell
  data Eff a = Eff1 a | Eff2 a | Eff3 a
  program = do
   a <- liftF $ Eff1 1
   b <- liftF $ Eff2 2
   c <- liftF $ Eff3 3
   return a + b + c
#+END_SRC

如果我们把 program 展开, 每一步 ~>>=~ 大概是这样:

#+BEGIN_SRC haskell
  liftF $ Eff1 1
#+END_SRC

展开既是:

#+BEGIN_SRC haskell
  Roll (Eff1 (Return 1))
#+END_SRC

代入到 program 即:
#+BEGIN_SRC haskell
  program = Roll (Eff1 (Return 1)) >>= \a -> do
     b <- liftF $ Eff2 2
     c <- liftF $ Eff3 3
     return a + b + c
#+END_SRC

用 Free 的 ~>>=~ 公式 ~Roll ffa >>= fn = Roll $ fmap (>>= fn) ffa~ 去展开上面就得到:

#+BEGIN_SRC haskell
  program = Roll $ Eff1 (Return 1 >>= fn1)) where
    fn1 = \a -> do
     b <- liftF $ Eff2 2
     c <- liftF $ Eff3 3
     return a + b + c
#+END_SRC

~Return 1 >>= fn1~ 我们都知道怎么展开:

#+BEGIN_SRC haskell
  program = Roll $ Eff1 (fn1 1) where
    fn1 = \a -> do
     b <- liftF $ Eff2 2
     c <- liftF $ Eff3 3
     return a + b + c
#+END_SRC

展开 =fn1=

#+BEGIN_SRC haskell
  program = Roll $ Eff1 do
     b <- liftF $ Eff2 2
     c <- liftF $ Eff3 3
     return 1 + b + c
#+END_SRC


同样的步骤展开 Eff2
#+BEGIN_SRC haskell
  program = Roll $ Eff1 $ Roll $ Eff2 do
     c <- liftF $ Eff3 3
     return 1 + 2 + c
#+END_SRC

和 Eff3

#+BEGIN_SRC haskell
  program = Roll $ Eff1 $ Roll $ Eff2 $ Roll $ Eff3 do
     return 1 + 2 + 3
#+END_SRC

最后的 program 是不是很像 List 的 Cons 和 Nil 呢?

#+BEGIN_SRC haskell
  program = Roll $ Eff1 $ Roll $ Eff2 $ Roll $ Eff3 $ Return 1 + 2 + 3
#+END_SRC


但是, 细心的你可能早都发现了 =Eff= 这货必须是个 =Functor= 才行. 那我们如何随便定义一个 =data Eff= 直接能生成 =Functor Eff= 的实例呢?

*** Coyoneda

希望你还依然记得第一部分的米田 +共+ 引理

#+BEGIN_SRC haskell
  data CoYoneda f a = forall b. CoYoneda (b -> a) (f b)
#+END_SRC

[[file:images/p3-CoYoneda.png]]

事实上很简单可以把任何 =f= 变成 =CoYoneda f=

#+BEGIN_SRC haskell
  phi :: f a -> CoYoneda f a
  phi fa = CoYoneda id fa
#+END_SRC

[[file:images/p3-CoYoneda-phi.png]]

诀窍就是 =id=, 也就是你把 =b= 变成 =a=, 再把 =fa= 放到 =CoYoneda= 里就好了

当 =f= 是 =Functor= 时, 又可以把 =CoYoneda= 变成 =f=

#+BEGIN_SRC haskell
  psi :: Functor f => CoYoneda f a -> f a
  psi (CoYoneda g fa) = fmap g fa
#+END_SRC

[[file:images/p3-CoYoneda-psi.png]]

反过来的这个不重要, 重要的是 =phi=, 因为如果你可以把任何 =f= 变成 =CoYoneda f=, 而 =CoYoneda f= 又是 =Functor=,
我们不就免费得到一个 =Functor=?

#+BEGIN_SRC haskell
  instance Functor (Coyoneda f) where
    fmap f (Coyoneda g fb) = Coyoneda (f . g) fb
#+END_SRC

*** Free Functor
比如我们的 =Eff= 就可以直接通过 =phi= 变成 =CoYoneda Eff=, 从而得到免费的 Functor

#+BEGIN_SRC haskell
  data Eff a = Eff1 a | Eff2 a | Eff3 a
  program = Roll (phi (Eff1 (Roll (phi (Eff2 (Return Int))))))
#+END_SRC

[[file:images/p3-Free.png]]

*** Interpreter
构造完一个 free program 后,我们得到的是一个嵌套的数据结构, 当我们需要 run 这个 program 时, 我们需要 foldMap 一个
Interpreter 去一层层拨开 这个 free program.

#+BEGIN_SRC haskell
  foldMap :: Monad m => (forall x . f x -> m x) -> Free f a -> m a
  foldMap _ (Return a)  = return a
  foldMap f (Roll a) = f a >>= foldMap f
#+END_SRC

** Free Monoid
** Eff

** Comonad

* References
- http://dev.stephendiehl.com/hask
- https://en.wikibooks.org/wiki/Haskell/Category_theory
- https://www.youtube.com/watch?v=ZKmodCApZwk
- https://www.youtube.com/watch?v=kiXjcqxVogE&list=PL50ABC4792BD0A086&index=5
- https://wiki.haskell.org/All_About_Monads
